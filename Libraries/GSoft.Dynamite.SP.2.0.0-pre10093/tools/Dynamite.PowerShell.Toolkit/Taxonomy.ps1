#
# Module 'Dynamite.PowerShell.Toolkit'
# Generated by: GSoft, Team Dynamite.
# Generated on: 10/24/2013
# > GSoft & Dynamite : http://www.gsoft.com
# > Dynamite Github : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
# > Documentation : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
#

<#
	.SYNOPSIS
		Commandlet to retrieve an object of type Microsoft.SharePoint.Taxonomy.TaxonomySession.

	.DESCRIPTION
		Commandlet to get an object of type Microsoft.SharePoint.Taxonomy.TaxonomySession for the site passed in the site parameter.
		If no site is passed the Central Administration will be used by default.

    --------------------------------------------------------------------------------------
    Module 'Dynamite.PowerShell.Toolkit'
    by: GSoft, Team Dynamite.
    > GSoft & Dynamite : http://www.gsoft.com
    > Dynamite Github : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    > Documentation : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    --------------------------------------------------------------------------------------
		
	.PARAMETER Site
		The Site Collection for wich the Taxonomy Session is related. The central Administration is used by default.
		
	.EXAMPLE
		PS C:\> Get-DSPTaxonomySession -Site "http://example.com"

	.OUTPUTS
		Microsoft.SharePoint.Taxonomy.TaxonomySession  
    
  .LINK
    GSoft, Team Dynamite on Github
    > https://github.com/GSoft-SharePoint
    
    Dynamite PowerShell Toolkit on Github
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    
    Documentation
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    
#>
function Get-DSPTaxonomySession()
{
	Param(
		[Parameter(Mandatory=$false, ValueFromPipeline=$true)]
		[Microsoft.SharePoint.PowerShell.SPSitePipeBind]$Site = $(
			$defaultSite = @(Get-SPWebApplication -IncludeCentralAdministration | Where {$_.IsAdministrationWebApplication})[0].Url
			new-object Microsoft.SharePoint.PowerShell.SPSitePipeBind($defaultSite)
		)
	)
	
	$session = new-object Microsoft.SharePoint.Taxonomy.TaxonomySession($Site.Read())
  return $session
}

<#
	.SYNOPSIS
		Commandlet to retrieve an object of type Microsoft.SharePoint.Taxonomy.TermStore.

	.DESCRIPTION
		Commandlet to get an object of type Microsoft.SharePoint.Taxonomy.TermStore from the Taxonomy Session passed in parameter.
		If no Taxonomy Session is passed the Central Administration will be used by default. If the default switch is used, the first
		Term Store found will be returned. Specifing the Id or Name will return the Term Store for that Id or Name.

    --------------------------------------------------------------------------------------
    Module 'Dynamite.PowerShell.Toolkit'
    by: GSoft, Team Dynamite.
    > GSoft & Dynamite : http://www.gsoft.com
    > Dynamite Github : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    > Documentation : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    --------------------------------------------------------------------------------------
		
	.PARAMETER TaxonomySession
		The Taxonomy Session where we can find the Term Store.
	
	.PARAMETER Default
		Returns the first Term Store found.
		
	.PARAMETER Name
		Returns the Term Store with that name.
	
	.PARAMETER Id
		Returns the Term Store with that GUID.
		
	.EXAMPLE
		PS C:\> Get-DSPTermStore -Default

	.OUTPUTS
		Microsoft.SharePoint.Taxonomy.TermStore  
    
  .LINK
    GSoft, Team Dynamite on Github
    > https://github.com/GSoft-SharePoint
    
    Dynamite PowerShell Toolkit on Github
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    
    Documentation
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    
#>
function Get-DSPTermStore()
{
	Param(
		[Parameter(Mandatory=$false, ValueFromPipeline=$true)]
		[Microsoft.SharePoint.Taxonomy.TaxonomySession]$TaxonomySession = $(Get-DSPTaxonomySession),
		
		[Parameter(Mandatory=$true, ParameterSetName="default")]
		[switch]$Default,
		
		[Parameter(Mandatory=$true, ParameterSetName="ByName")]
		[string]$Name,
		
		[Parameter(Mandatory=$true, ParameterSetName="ById")]
		[string]$Id
	)
	
	switch($PsCmdlet.ParameterSetName)
	{
		"ByName" {
			$identifier = $Name
		}
		
		"ById" {
			$identifier = $Id
		}
		
		"default" {
			$serviceApp = @(Get-SPServiceApplication | Where {$_.TypeName -like "*Metadata*"})[0]
			$identifier = $serviceApp.Name
		}
	}
	  
  $termStore = $TaxonomySession.TermStores[$identifier]
  return $termStore;
}

<#
	.SYNOPSIS
		Commandlet to retrieve an object of type Microsoft.SharePoint.Taxonomy.TermSet.

	.DESCRIPTION
		Commandlet to get an object of type Microsoft.SharePoint.Taxonomy.TermSet from the Taxonomy Store passed in parameter.
		If no Taxonomy Store is passed 'Get-DSPTermStore -Default' will be used by default.

    --------------------------------------------------------------------------------------
    Module 'Dynamite.PowerShell.Toolkit'
    by: GSoft, Team Dynamite.
    > GSoft & Dynamite : http://www.gsoft.com
    > Dynamite Github : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    > Documentation : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    --------------------------------------------------------------------------------------
		
	.PARAMETER TermStore
		The Term Store where we can find the Term Set.
	
	.PARAMETER GroupName
		The Group of the Term Set.
		
	.PARAMETER TermSetName
		The Term Set to assign to the field.
		
	.EXAMPLE
		PS C:\> Get-DSPTermSet -GroupName "People" -TermSetName "Job Title"

	.OUTPUTS
		Microsoft.SharePoint.Taxonomy.TermSet  
    
  .LINK
    GSoft, Team Dynamite on Github
    > https://github.com/GSoft-SharePoint
    
    Dynamite PowerShell Toolkit on Github
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    
    Documentation
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    
#>
function Get-DSPTermSet()
{
	Param(
		[Parameter(Mandatory=$false,ValueFromPipeline=$true)]
		[Microsoft.SharePoint.Taxonomy.TermStore]$TermStore = $(Get-DSPTermStore -Default),
		
		[Parameter(Mandatory=$true)]
		[string]$GroupName,
		
		[Parameter(Mandatory=$true)]
		[string]$TermSetName
	)
	
  return $TermStore.Groups[$GroupName].TermSets[$TermSetName]
}

function Get-DSPNavigationTermSet()
{
	Param(
		[Parameter(Mandatory=$false,ValueFromPipeline=$true)]
		[Microsoft.SharePoint.Taxonomy.TermStore]$TermStore = $(Get-DSPTermStore -Default),
		
		[Parameter(Mandatory=$false, ValueFromPipeline=$true)]
		[Microsoft.SharePoint.PowerShell.SPSitePipeBind]$Site = $(
			$defaultSite = @(Get-SPWebApplication -IncludeCentralAdministration | Where {$_.IsAdministrationWebApplication})[0].Url
			new-object Microsoft.SharePoint.PowerShell.SPSitePipeBind($defaultSite)
		),
		
		[Parameter(Mandatory=$true)]
		[string]$GroupName,
		
		[Parameter(Mandatory=$true)]
		[string]$TermSetName
	)
	
	$termSet = Get-DSPTermSet -TermStore $termStore -GroupName $GroupName -TermSetName $TermSetName
	return [Microsoft.SharePoint.Publishing.Navigation.NavigationTermSet]::GetAsResolvedByWeb($termSet, $Site.Read().RootWeb, [Microsoft.SharePoint.Publishing.Navigation.StandardNavigationProviderNames]::CurrenCurrentNavigationTaxonomyProvider)
}

<#
	.SYNOPSIS
		Commandlet to create an new Taxonomy Field in the specified web.

	.DESCRIPTION
		Commandlet to create and return a new Taxonomy Field in the specified web.

    --------------------------------------------------------------------------------------
    Module 'Dynamite.PowerShell.Toolkit'
    by: GSoft, Team Dynamite.
    > GSoft & Dynamite : http://www.gsoft.com
    > Dynamite Github : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    > Documentation : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    --------------------------------------------------------------------------------------
   	 
	.PARAMETER Web
		The web where the field will be created.
		
	.PARAMETER StaticName
		The internal name of the field.
		
	.PARAMETER DisplayName
		The display name of the field.
		
	.PARAMETER FieldGroup
		The Field Group name of the field.
		
	.PARAMETER TermSet
		The Term Set to assign to the field.
		
	.PARAMETER TermStoreGroupName
		The Group of the Term Set.
		
	.PARAMETER TermSetName
		The Term Set to assign to the field.
		
	.PARAMETER TermStore
		The Term Store where we can find the Term Set.

	.EXAMPLE
		PS C:\> New-DSPTaxonomyField -Web "http://example.com/" -DisplayName "Name" -FieldGroup "Group" -StaticName "name" -TermStoreGroupName "People" -TermSetName "Job Title"

	.OUTPUTS
		n/a   
    
  .LINK
    GSoft, Team Dynamite on Github
    > https://github.com/GSoft-SharePoint
    
    Dynamite PowerShell Toolkit on Github
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    
    Documentation
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    
#>
function New-DSPTaxonomyField()
{
	Param(
		[Parameter(Mandatory=$true, ValueFromPipeline=$true)]
		[Microsoft.SharePoint.PowerShell.SPWebPipeBind]$Web,
		
		[Parameter(Mandatory=$true)]
		[string]$StaticName, 
		
		[Parameter(Mandatory=$true)]
	  [string]$DisplayName,
		
		[Parameter(Mandatory=$true)]
	  [string]$FieldGroup, 
		
		[Parameter(Mandatory=$true, ParameterSetName="TermSet")]
		[Microsoft.SharePoint.Taxonomy.TermSet]$TermSet,
		
		[Parameter(Mandatory=$true, ParameterSetName="GetTermSet")]
	  [string]$TermStoreGroupName,
		
		[Parameter(Mandatory=$true, ParameterSetName="GetTermSet")]
	  [string]$TermSetName,
		
		[Parameter(Mandatory=$false, ParameterSetName="GetTermSet")]
		[Microsoft.SharePoint.Taxonomy.TermStore]$TermStore = $(Get-DSPTermStore -Default)
	)
	
	if ($PsCmdlet.ParameterSetName -eq "GetTermSet") {
			$TermSet = Get-DSPTermSet -TermStore $TermStore -GroupName $TermStoreGroupName -TermSetName $TermSetName
	}
	
	$webSite = $Web.Read()
  $taxonomyField = $webSite.Fields.CreateNewField("TaxonomyFieldType", $DisplayName)

  $taxonomyField.SspId = $TermSet.TermStore.Id
  $taxonomyField.TermSetId = $TermSet.Id
  $taxonomyField.AllowMultipleValues = $false
  $taxonomyField.Group = $FieldGroup
  $taxonomyField.StaticName = $StaticName
  $taxonomyField.ShowInEditForm = $true
  $taxonomyField.ShowInNewForm = $true
  $taxonomyField.Hidden = $false
  $taxonomyField.Required = $false

  $webSite.Fields.Add($taxonomyField);

  $webSite.Update();

  return $taxonomyField
}

<#
	.SYNOPSIS
		Commandlet to set the Term Set to an existing Taxonomy Field.

	.DESCRIPTION
		Commandlet to set the Term Set to an existing Taxonomy Field.

    --------------------------------------------------------------------------------------
    Module 'Dynamite.PowerShell.Toolkit'
    by: GSoft, Team Dynamite.
    > GSoft & Dynamite : http://www.gsoft.com
    > Dynamite Github : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    > Documentation : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    --------------------------------------------------------------------------------------
   	 
	.PARAMETER Web
		The web where the field is.
		
	.PARAMETER StaticName
		The internal name of the field.
		
	.PARAMETER TermSet
		The Term Set to assign to the field.
		
	.PARAMETER TermStoreGroupName
		The Group of the Term Set.
		
	.PARAMETER TermSetName
		The Term Set to assign to the field.
		
	.PARAMETER TermStore
		The Term Store where we can find the Term Set.

	.EXAMPLE
		PS C:\> Set-DSPTaxonomyField -Web "http://example.com" -StaticName "name" -TermStoreGroupName "People" -TermSetName "Job Title"

	.OUTPUTS
		n/a   
    
  .LINK
    GSoft, Team Dynamite on Github
    > https://github.com/GSoft-SharePoint
    
    Dynamite PowerShell Toolkit on Github
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    
    Documentation
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    
#>
function Set-DSPTaxonomyField()
{
	Param(
		[Parameter(Mandatory=$true, ValueFromPipeline=$true)]
		[Microsoft.SharePoint.PowerShell.SPWebPipeBind]$Web,
		
		[Parameter(Mandatory=$true)]
		[string]$StaticName,
		
		[Parameter(Mandatory=$true, ParameterSetName="TermSet")]
		[Microsoft.SharePoint.Taxonomy.TermSet]$TermSet,
		
		[Parameter(Mandatory=$true, ParameterSetName="GetTermSet")]
	  [string]$TermStoreGroupName,
		
		[Parameter(Mandatory=$true, ParameterSetName="GetTermSet")]
	  [string]$TermSetName,
		
		[Parameter(Mandatory=$false, ParameterSetName="GetTermSet")]
		[Microsoft.SharePoint.Taxonomy.TermStore]$TermStore
	)

  if ($PsCmdlet.ParameterSetName -eq "GetTermSet") {
			$TermSet = Get-DSPTermSet -GroupName $TermStoreGroupName -TermSetName $TermSetName
	}
  
	$webSite = $Web.Read()
  $taxonomyField = [Microsoft.SharePoint.Taxonomy.TaxonomyField]$webSite.Fields.GetFieldByInternalName($StaticName)

    if(!($taxonomyField -eq $null))
    {
      $taxonomyField.SspId = $TermSet.TermStore.Id
      $taxonomyField.TermSetId = $TermSet.Id
      
      $taxonomyField.Update()
    }
    else
    {
        Write-Error "Field $StaticName not found!"
    }
}

<#
	.SYNOPSIS
		Commandlet to set the Term Set to several existing Taxonomy Field defined in an xml file.

	.DESCRIPTION
		Commandlet to set the Term Set to several existing Taxonomy Field defined in an xml file.

    --------------------------------------------------------------------------------------
    Module 'Dynamite.PowerShell.Toolkit'
    by: GSoft, Team Dynamite.
    > GSoft & Dynamite : http://www.gsoft.com
    > Dynamite Github : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    > Documentation : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    --------------------------------------------------------------------------------------
   
	 .Notes
	 	Here is an example of the xml used as input
	 	<Webs>
			<Web Url="http://example.com">
				<Fields>
					<Field Name="name" Group="People" Term="Job Title" />
				</Fields>
			</Web>
		</Webs>
	 
	.PARAMETER  TermsConfigXml
		The xml definition containing the fields to set.

	.EXAMPLE
		PS C:\> Get-Content 'c:\Fields.xml' | Set-DSPTaxonomyTerms

	.OUTPUTS
		n/a   
    
  .LINK
    GSoft, Team Dynamite on Github
    > https://github.com/GSoft-SharePoint
    
    Dynamite PowerShell Toolkit on Github
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    
    Documentation
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    
#>
function Set-DSPTaxonomyTerms()
{
	Param(
		[Parameter(Mandatory=$true, ValueFromPipeline=$true)]
		[xml]$TermsConfigXml
	)

    $TermsConfigXml.Webs.Web | ForEach-Object
    {
  		$fields = $_.Fields.Field
      [string]$url = $_.Url 
  		
  		$fields | ForEach-Object
      {
  		  Set-DSPTaxonomyField -Web $url -StaticName $_.Name -TermStoreGroupName $_.Group  -TermSetName $_.Term
  		}
    }
}

<#
	.SYNOPSIS
		Commandlet to set an unique term as Taxonomy Value 

	.DESCRIPTION
		Commandlet to set an unique term as Taxonomy Value 

    --------------------------------------------------------------------------------------
    Module 'Dynamite.PowerShell.Toolkit'
    by: GSoft, Team Dynamite.
    > GSoft & Dynamite : http://www.gsoft.com
    > Dynamite Github : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    > Documentation : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    --------------------------------------------------------------------------------------
   
	.PARAMETER  ListItem
		The List Item
		
	.PARAMETER  ListItem
		The internal name of the column corresponding to the Taxonomy Field

	.PARAMETER  LabelGuidPair
		Label Guid pair of the term (e.g TextLabelValue|GUID)
		
	.EXAMPLE
		PS C:\> Set-TaxonomyFieldValue <ListItemInstance> "MyColumn" MyTerm|f21cdfde-8614-4a60-b047-6ecb4bfb2449

	.OUTPUTS
		n/a   
    
  .LINK
    GSoft, Team Dynamite on Github
    > https://github.com/GSoft-SharePoint
    
    Dynamite PowerShell Toolkit on Github
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    
    Documentation
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    
#>
function Set-DSPTaxonomyFieldValue
{
	Param(
		[Parameter(Mandatory=$true)]
		[Microsoft.SharePoint.SPListItem]$ListItem,
		
		[Parameter(Mandatory=$true)]
		[string]$FieldName,
		
		[Parameter(Mandatory=$true)]
		[string]$LabelGuidPair	
	)

    [Microsoft.SharePoint.Taxonomy.TaxonomyField]$taxonomyField = $ListItem.Fields.GetField($FieldName)
    [Microsoft.SharePoint.Taxonomy.TaxonomyFieldValue]$taxonomyFieldValue = New-Object Microsoft.SharePoint.Taxonomy.TaxonomyFieldValue($taxonomyField)
    $taxonomyFieldValue.PopulateFromLabelGuidPair($LabelGuidPair)
 
    $ListItem[$taxonomyField.Id] = $taxonomyFieldValue;
 
    $ListItem[$taxonomyField.TextField] = $LabelGuidPair
}

<#
	.SYNOPSIS
		Commandlet to set multiple terms as Taxonomy Value 

	.DESCRIPTION
		Commandlet to set multiple terms as Taxonomy Value 

    --------------------------------------------------------------------------------------
    Module 'Dynamite.PowerShell.Toolkit'
    by: GSoft, Team Dynamite.
    > GSoft & Dynamite : http://www.gsoft.com
    > Dynamite Github : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    > Documentation : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    --------------------------------------------------------------------------------------
   
	.PARAMETER  ListItem
		The List Item
		
	.PARAMETER  ListItem
		The internal name of the column corresponding to the Taxonomy Field

	.PARAMETER  LabelGuidPair
		Label Guid pair of the term separated by a semicolon (e.g TextLabelValue1|GUID1;TextLabelValue2|GUID2)
		
	.EXAMPLE
		PS C:\> Set-TaxonomyFieldMultiValue <ListItemInstance> "MyColumn" "MyTerm1|f21cdfde-8614-4a60-b047-6ecb4bfb2449;MyTerm2|f21cdfde-4694-4a60-dsa1-6ecb4sasab1389"

	.OUTPUTS
		n/a   
    
  .LINK
    GSoft, Team Dynamite on Github
    > https://github.com/GSoft-SharePoint
    
    Dynamite PowerShell Toolkit on Github
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    
    Documentation
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    
#>
function Set-DSPTaxonomyFieldMultiValue
{
	Param(
		[Parameter(Mandatory=$true)]
		[Microsoft.SharePoint.SPListItem]$ListItem,
		
		[Parameter(Mandatory=$true)]
		[string]$FieldName,
		
		[Parameter(Mandatory=$true)]
		[string]$LabelGuidPairs	
	)

    [Microsoft.SharePoint.Taxonomy.TaxonomyField]$taxonomyField = $ListItem.Fields.GetField($FieldName)

    [array]$labelGuidPairFieldValuesArray = $LabelGuidPairs.Split(";")
 
    [Microsoft.SharePoint.Taxonomy.TaxonomyFieldValueCollection]$taxonomyFieldValues = New-Object Microsoft.SharePoint.Taxonomy.TaxonomyFieldValueCollection($taxonomyField)
 
    foreach ($labelGuidPairFieldValue in $labelGuidPairFieldValuesArray)
    {
        [Microsoft.SharePoint.Taxonomy.TaxonomyFieldValue]$taxonomyFieldValue = New-Object Microsoft.SharePoint.Taxonomy.TaxonomyFieldValue($taxonomyField)
        $taxonomyFieldValue.PopulateFromLabelGuidPair($labelGuidPairFieldValue)

        $taxonomyFieldValues.Add($taxonomyFieldValue)
    }
 
    # Set the taxonomy field to contain all of the Taxonomy Field Values
    $ListItem[$taxonomyField.Id] = $taxonomyFieldValues;
 
    $ListItem[$taxonomyField.TextField] = $LabelGuidPairs
}

<#
	.SYNOPSIS
		Commandlet to set delete a term store group and it's containing term sets.

	.DESCRIPTION
		Commandlet to set delete a term store group and it's containing term sets.

    --------------------------------------------------------------------------------------
    Module 'Dynamite.PowerShell.Toolkit'
    by: GSoft, Team Dynamite.
    > GSoft & Dynamite : http://www.gsoft.com
    > Dynamite Github : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    > Documentation : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    --------------------------------------------------------------------------------------
   	 
	.PARAMETER TermStore
		The Term Store where we can find the Term Group (uses the default term store if none specified).
		
	.PARAMETER GroupName
		The name of the Term Group.

	.EXAMPLE
		PS C:\> Remove-DSPTermGroup -GroupName "People"
		PS C:\> Get-DSPTermStore -Name "Managed Metdata Service" | Remove-DSPTermGroup -GroupName "People"

	.OUTPUTS
		n/a   
    
  .LINK
    GSoft, Team Dynamite on Github
    > https://github.com/GSoft-SharePoint
    
    Dynamite PowerShell Toolkit on Github
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    
    Documentation
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    
#>
function Remove-DSPTermGroup {
	Param(
		[Parameter(Mandatory=$false,ValueFromPipeline=$true)]
		[Microsoft.SharePoint.Taxonomy.TermStore]$TermStore = $(Get-DSPTermStore -Default),
		
		[Parameter(Mandatory=$true)]
		[string]$GroupName
	)
	
    $group = $TermStore.Groups | where { $_.Name -eq $GroupName }
    if ($group -ne $null) {
      	$group.TermSets | foreach {
			Write-Verbose "Removing term set '$($_.Path)' ..."
    		$_.Delete()
    		$TermStore.CommitAll()
   		}
		
		Write-Host "Removing term group '$($group.Name)' ..."
		$group.Delete()
		$TermStore.CommitAll()
		Write-Host "Done." -ForegroundColor Green
    }
	else {
		Write-Host "Unable to find group with name '$GroupName'." -ForegroundColor Yellow
	}
	  
	$TermStore.CommitAll()
}