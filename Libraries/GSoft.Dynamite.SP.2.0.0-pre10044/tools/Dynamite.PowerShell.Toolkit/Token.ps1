#
# Module 'Dynamite.PowerShell.Toolkit'
# Generated by: GSoft, Team Dynamite.
# Generated on: 10/24/2013
# > GSoft & Dynamite : http://www.gsoft.com
# > Dynamite Github : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
# > Documentation : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
#

<#
.SYNOPSIS
	Replaces tokens in all child items with the file extention .template recursively.
	
.DESCRIPTION
	Replaces tokens in all child items with the file extention .template recursively.
	The template item is copied with without the .template extention before the tokens are replaced.
	The tokens are defined in a 'Tokens.Domain.ps1' file.
	Please define tokens as valiables with the prefix 'DSP_'. 
	EX.: $DSP_token1 = "Value 1" will replace [[DSP_token1]] in any .template file
	
    --------------------------------------------------------------------------------------
    Module 'Dynamite.PowerShell.Toolkit'
    by: GSoft, Team Dynamite.
    > GSoft & Dynamite : http://www.gsoft.com
    > Dynamite Github : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    > Documentation : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    --------------------------------------------------------------------------------------
    
.PARAMETER Path
	The path where all the files are located. By default the value is the current working location.
	
.PARAMETER Domain
	The prefix for the token file 'Tokens.Domain.ps1'. By default the value is the current NetBIOS name.
 	
.PARAMETER Encoding
	Specifies the file encoding. The default is UTF8.
	Valid values are:
	-- ASCII: Uses the encoding for the ASCII (7-bit) character set.
	-- BigEndianUnicode: Encodes in UTF-16 format using the big-endian byte order.
	-- Byte: Encodes a set of characters into a sequence of bytes.
	-- String: Uses the encoding type for a string.
	-- Unicode: Encodes in UTF-16 format using the little-endian byte order.
	-- UTF7: Encodes in UTF-7 format.
	-- UTF8: Encodes in UTF-8 format.
	-- Unknown: The encoding type is unknown or invalid. The data can be treated as binary.
	
.PARAMETER TemplatePath
	The path where the template files are tokenized. By default the value is the current working location.
               
  .LINK
    GSoft, Team Dynamite on Github
    > https://github.com/GSoft-SharePoint
    
    Dynamite PowerShell Toolkit on Github
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    
    Documentation
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    
#>
function Update-DSPTokens {
	Param (
		[Parameter(Mandatory=$false, ValueFromPipeline=$true)]
		[ValidateScript({Test-Path $_})]
		[string]$Path = (Get-Location),
		
		[Parameter(Mandatory=$false)]
		[string]$Domain = [System.Net.Dns]::GetHostName(),
		
		[Parameter(Mandatory=$false)]
		[Microsoft.PowerShell.Commands.FileSystemCmdletProviderEncoding]
		$Encoding = [Microsoft.PowerShell.Commands.FileSystemCmdletProviderEncoding]::UTF8,
		
		[ValidateScript({Test-Path $_})]
		[string]$TemplatePath = (Get-Location),
		
		[Parameter(Mandatory=$false)]
		[switch]$UseHostName,
		
		[Parameter(Mandatory=$false)]
		[switch]$UseDomain
	)
	
	if ($UseHostName -eq $true) {
		$Domain = [System.Net.Dns]::GetHostName()
	}
	
	if ($UseDomain -eq $true) {
		$Domain = (Get-CurrentDomain)
	}

	$tokenPath = ""
	
	$Path = Resolve-Path $Path
	$TemplatePath = Resolve-Path $TemplatePath
		
	Get-ChildItem -Path $Path -Include "Tokens.$Domain.ps1" -Recurse | foreach {
		$tokenPath = $_.FullName
	}
	
	if (Test-Path $tokenPath) {
		Write-Host "Found token file at : $tokenPath"
		Execute-TokenFile $TemplatePath $tokenPath $Encoding
	}
	else {
		Write-Host "Didn't found the token file named : Tokens.$Domain.ps1"
	}
}

<#
.SYNOPSIS
	Returns the current domain name using wmi. If wmi is not installed, 
	then use the USERDOMAIN environment variable.
#>
function script:Get-CurrentDomain {
	try {
		# Return this version if wmi is installed
		return [string](gwmi Win32_NTDomain).DomainName.Trim()
	} catch {
		# Fall back on this version in case of error
		return $env:USERDOMAIN
	}
}

function script:Execute-TokenFile {
	param (
		$Path,
		$TokenPath,
		$Encoding
	)
	Write-Host "$TokenPath"
	# Load tokens
	. $TokenPath
	$tokens = Get-Variable -Include "DSP_*"
	
	# Replace tokens in all .template files.
	Get-ChildItem -Path $Path -Include "*.template" -Recurse | foreach {
		Write-Host "Replacing tokens in file '$_'... " -NoNewline
		
		try {
			# Get the contents of the template file.
			$contents  = Get-Content $_ -Encoding $Encoding -ErrorAction Stop
			
			# for each token in our token file, we replace the token in the contents of the file.
			$tokens | ForEach {
				$contents = $contents -replace "\[\[$($_.Name)\]\]", $_.Value
			}
			
			# Write the contents with the replaces tokens to a new file overriding any current file.
			Set-Content -Encoding $Encoding -Value $contents -path $_.FullName.Substring(0, $_.FullName.IndexOf(".template")) -Force -ErrorAction Stop
		} catch {
			Write-Host "Failed - $_" -ForegroundColor Red
		}
		
		Write-Host "Success!" -ForegroundColor Green
	}
}